"""State machine comment"""

version: "1.0"
timeout: 60

# ====== #
# States #
# ====== #

Pass()
    """Pass
    Comment"""
    input: '$.foo'
    result: '$.foo'
    output: '$.foo'
    data:
        {}

Lambda('FUNCTION_NAME')
    '''Lambda
    Comment'''
    timeout: 2
    heartbeat: 1
    input: '$.foo'
    result: '$.foo'
    output: '$.foo'
    retry "one" 1 1 1
    retry ['two'] 1 1 1
    catch 'one':
        Pass()
    catch ['two']: '$.foo'
        Success()

Activity('FUNCTION_NAME')
    """Activity"""

Arn('arn:aws:service:region:account:task_type:name')
    """Raw ARN Task"""
    parameters:
        KeyOne: 'ValueOne'
        KeyTwo: 'ValueTwo'
        sync: True


Batch.SubmitJob()
    """Batch.SubmitJob"""
    parameters:
        JobName: 'Name'
        JobDefinition: ''
        JobQueue: 'arn'

        # Optional keyword arguments
        ArrayProperties: {}
        ContainerOverrides: {}
        DependsOn: []
        Parameters: {}
        RetryStrategy: {}
        Timeout: {}
        sync: False

DynamoDB.GetItem()
    """DynamoDB.GetItem"""
    parameters:
        TableName: 'Table'
        Key: {}

        # Optional keyword arguments
        AttributesToGet: []
        ConsistentRead: True
        ExpressionAttributeNames: {}
        ProjectionExpression: ''
        ReturnConsumedCapacity: ''

DynamoDB.PutItem()
    """DynamoDB.PutItem"""
    parameters:
        TableName: 'Table'
        Item: {}

        # Optional keyword arguments
        ConditionalOperator: ''
        ConditionExpression: ''
        Expected: {}
        ExpressionAttributeNames: {}
        ExpressionAttributeValues: {}
        ReturnConsumedCapacity: ''
        ReturnItemCollectionMetrics: ''
        ReturnValues: ''

DynamoDB.DeleteItem()
    """DynamoDB.DeleteItem"""
    parameters:
        TableName: 'Table'
        Key: {}

        # Optional keyword arguments
        ConditionalOperator: ''
        ConditionExpression: ''
        Expected: {}
        ExpressionAttributeNames: {}
        ExpressionAttributeValues: {}
        ReturnConsumedCapacity: ''
        ReturnItemCollectionMetrics: ''
        ReturnValues: ''

DynamoDB.UpdateItem()
    """DynamoDB.UpdateItem"""
    parameters:
        TableName: 'Table'
        Key: {}

        # Optional keyword arguments
        AttributeUpdates: {}
        ConditionalOperator: ''
        ConditionExpression: ''
        Expected: {}
        ExpressionAttributeNames: {}
        ExpressionAttributeValues: {}
        ReturnConsumedCapacity: ''
        ReturnItemCollectionMetrics: ''
        ReturnValues: ''
        UpdateExpression: ''

ECS.RunTask()
    """ECS.RunTask"""
    parameters:
        TaskDefinition: ''

        # Optional keyword arguments
        Cluster: ''
        Group: ''
        LaunchType: ''
        NetworkConfiguration: {}
        Overrides: {}
        PlacementConstraints: {}
        PlacementStrategy: {}
        PlatformVersion: ''
        sync: True

SNS.Publish()
    """SNS.Publish"""
    parameters:
        Message: ''

        # Optional keyword arguments
        MessageAttributes: {}
        MessageStructure: ''
        PhoneNumber: ''
        Subject: ''
        TargetArn: ''
        TopicArn: ''

SQS.SendMessage()
    """SQS.SendMessage"""
    parameters:
        QueueUrl: ''
        MessageBody: ''

        # Optional keyword arguments
        DelaySeconds: 0
        MessageAttributes: {}
        MessageDeduplicationId: ''
        MessageGroupId: ''

Glue.StartJobRun()
    """Glue.StartJobRun"""
    parameters:
        JobName: ''

        # Optional keyword arguments
        JobRunId: ''
        Arguments: {}
        AllocatedCapacity: 0
        Timeout: 1
        SecurityConfiguration: ''
        NotificationProperty: {}
        sync: True

SageMaker.CreateTrainingJob()
    """SageMaker.CreateTrainingJob"""
    parameters:
        TrainingJobName: ''
        AlgorithmSpecification: {}
        OutputDataConfig: {}
        ResourceConfig: {}
        RoleArn: ''
        StoppingCondition: {}

        # Optional keyword arguments
        HyperParameters: {}
        InputDataConfig: []
        Tags: []
        VpcConfig: {}
        sync: True

SageMaker.CreateTransformJob()
    """SageMaker.CreateTransformJob"""
    parameters:
        TransformJobName: ''
        ModelName: ''
        TransformInput: {}
        TransformOutput: {}
        TransformResources: {}

        # Optional keyword arguments
        BatchStrategy: ''
        Environment: {}
        MaxConcurrentTransforms: 0
        MaxPayloadInMB: 0
        Tags: []
        sync: True


Wait(seconds=1)
    """Wait-Seconds"""
Wait(timestamp='1111-11-11T11:11:11Z')
    """Wait-Timestamp"""
Wait(seconds_path='$.foo')
    """Wait-Seconds-Path"""
Wait(timestamp_path='$.foo')
    """Wait-Timestamp-Path
    Comment"""
    input: '$.foo'
    output: '$.foo'

# ============ #
# Flow Control #
# ============ #

while '$.foo' == 1:
    """While"""
    Pass()
        """While-Body"""
transform:
    input: '$.foo'
    output: '$.foo'

if '$.foo' == 1 or ('$.foo' >= 10 and '$.foo' < 20):
    """If-Elif-Else"""
    Pass()
elif '$.foo' <= 1:
    Pass()
elif '$.foo' < 1:
    Pass()
elif '$.foo' >= 1:
    Pass()
elif '$.foo' > 1:
    Pass()
elif '$.foo' != 1:
    Pass()
elif '$.foo' == '1':
    Pass()
elif '$.foo' <= '1':
    Pass()
elif '$.foo' < '1':
    Pass()
elif '$.foo' >= '1':
    Pass()
elif '$.foo' > '1':
    Pass()
elif '$.foo' != '1':
    Pass()
elif '$.foo' == true:
    Pass()
elif '$.foo' != true:
    Pass()
elif '$.foo' == '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' <= '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' < '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' >= '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' > '1111-11-11T11:11:11Z':
    Pass()
elif '$.foo' != '1111-11-11T11:11:11Z':
    Pass()

switch '$.a':
    """Switch"""
    case 1:
        Pass()
    case 'foo':
        Pass()
    case '1111-11-11T11:11:11Z':
        Pass()
    default:
        Pass()
transform:
    output: '$.foo'

parallel:
    """Parallel"""
    Success()
        """Success
        Comment"""
        # DP NOTE 2019/05/19: AWS Console considers InputPath / OutputPath
        # invalid for the Succeed state, even though the language definition
        # says it is valid, but will allow creating a Step Function with them
        input: '$.foo'
        output: '$.foo'

parallel:
    Fail('error', 'cause')
        """Fail
        Comment"""

transform:
    input: '$.foo'
error:
    retry [] 1 0 1.0
    catch []:
        Pass()
