{
   "States": {
      "Pass": {
         "Comment": "Comment", 
         "ResultPath": "$.foo", 
         "Next": "Lambda", 
         "OutputPath": "$.foo", 
         "Result": {}, 
         "InputPath": "$.foo", 
         "Type": "Pass"
      }, 
      "Lambda": {
         "Comment": "Comment", 
         "Retry": [
            {
               "ErrorEquals": [
                  "one"
               ], 
               "MaxAttempts": 1, 
               "IntervalSeconds": 1, 
               "BackoffRate": 1.0
            }, 
            {
               "ErrorEquals": [
                  "two"
               ], 
               "MaxAttempts": 1, 
               "IntervalSeconds": 1, 
               "BackoffRate": 1.0
            }
         ], 
         "Resource": "arn:aws:lambda:::lambda:arn", 
         "TimeoutSeconds": 2, 
         "ResultPath": "$.foo", 
         "HeartbeatSeconds": 1, 
         "OutputPath": "$.foo", 
         "Catch": [
            {
               "ErrorEquals": [
                  "one"
               ], 
               "Next": "Line30"
            }, 
            {
               "ErrorEquals": [
                  "two"
               ], 
               "ResultPath": "$.foo", 
               "Next": "Line32"
            }
         ], 
         "InputPath": "$.foo", 
         "Next": "Activity", 
         "Type": "Task"
      }, 
      "Line30": {
         "Type": "Pass", 
         "Next": "Activity"
      }, 
      "Line32": {
         "Type": "Succeed"
      }, 
      "Activity": {
         "Resource": "arn:aws:states:::activity:activity:FUNCTION_NAME", 
         "Type": "Task", 
         "Next": "Raw ARN Task"
      }, 
      "Raw ARN Task": {
         "Resource": "arn:aws:state:region:account:service:function", 
         "Type": "Task", 
         "Parameters": {
            "KeyOne": "ValueOne", 
            "KeyTwo": "ValueTwo", 
            "sync": true
         }, 
         "Next": "Batch.SubmitJob"
      }, 
      "Batch.SubmitJob": {
         "Resource": "arn:aws:states:::batch:submitJob", 
         "Type": "Task", 
         "Parameters": {
            "JobName": "Name", 
            "JobDefinition": "", 
            "JobQueue": "arn", 
            "ArrayProperties": {}, 
            "ContainerOverrides": {}, 
            "DependsOn": [], 
            "Parameters": {}, 
            "RetryStrategy": {}, 
            "Timeout": {}
         }, 
         "Next": "DynamoDB.GetItem"
      }, 
      "DynamoDB.GetItem": {
         "Resource": "arn:aws:states:::dynamodb:getItem", 
         "Type": "Task", 
         "Parameters": {
            "TableName": "Table", 
            "Key": {}, 
            "AttributesToGet": [], 
            "ConsistentRead": true, 
            "ExpressionAttributeNames": {}, 
            "ProjectionExpression": "", 
            "ReturnConsumedCapacity": ""
         }, 
         "Next": "DynamoDB.PutItem"
      }, 
      "DynamoDB.PutItem": {
         "Resource": "arn:aws:states:::dynamodb:putItem", 
         "Type": "Task", 
         "Parameters": {
            "TableName": "Table", 
            "Item": {}, 
            "ConditionalOperator": "", 
            "ConditionExpression": "", 
            "Expected": {}, 
            "ExpressionAttributeNames": {}, 
            "ExpressionAttributeValues": {}, 
            "ReturnConsumedCapacity": "", 
            "ReturnItemCollectionMetrics": "", 
            "ReturnValues": ""
         }, 
         "Next": "DynamoDB.DeleteItem"
      }, 
      "DynamoDB.DeleteItem": {
         "Resource": "arn:aws:states:::dynamodb:deleteItem", 
         "Type": "Task", 
         "Parameters": {
            "TableName": "Table", 
            "Key": {}, 
            "ConditionalOperator": "", 
            "ConditionExpression": "", 
            "Expected": {}, 
            "ExpressionAttributeNames": {}, 
            "ExpressionAttributeValues": {}, 
            "ReturnConsumedCapacity": "", 
            "ReturnItemCollectionMetrics": "", 
            "ReturnValues": ""
         }, 
         "Next": "DynamoDB.UpdateItem"
      }, 
      "DynamoDB.UpdateItem": {
         "Resource": "arn:aws:states:::dynamodb:updateItem", 
         "Type": "Task", 
         "Parameters": {
            "TableName": "Table", 
            "Key": {}, 
            "AttributeUpdates": {}, 
            "ConditionalOperator": "", 
            "ConditionExpression": "", 
            "Expected": {}, 
            "ExpressionAttributeNames": {}, 
            "ExpressionAttributeValues": {}, 
            "ReturnConsumedCapacity": "", 
            "ReturnItemCollectionMetrics": "", 
            "ReturnValues": "", 
            "UpdateExpression": ""
         }, 
         "Next": "ECS.RunTask"
      }, 
      "ECS.RunTask": {
         "Resource": "arn:aws:states:::ecs:runTask.sync", 
         "Type": "Task", 
         "Parameters": {
            "TaskDefinition": "", 
            "Cluster": "", 
            "Group": "", 
            "LaunchType": "", 
            "NetworkConfiguration": {}, 
            "Overrides": {}, 
            "PlacementConstraints": {}, 
            "PlacementStrategy": {}, 
            "PlatformVersion": ""
         }, 
         "Next": "SNS.Publish"
      }, 
      "SNS.Publish": {
         "Resource": "arn:aws:states:::sns:publish", 
         "Type": "Task", 
         "Parameters": {
            "Message": "", 
            "MessageAttributes": {}, 
            "MessageStructure": "", 
            "PhoneNumber": "", 
            "Subject": "", 
            "TargetArn": "", 
            "TopicArn": ""
         }, 
         "Next": "SQS.SendMessage"
      }, 
      "SQS.SendMessage": {
         "Resource": "arn:aws:states:::sqs:sendMessage", 
         "Type": "Task", 
         "Parameters": {
            "QueueUrl": "", 
            "MessageBody": "", 
            "DelaySeconds": 0, 
            "MessageAttributes": {}, 
            "MessageDeduplicationId": "", 
            "MessageGroupId": ""
         }, 
         "Next": "Glue.StartJobRun"
      }, 
      "Glue.StartJobRun": {
         "Resource": "arn:aws:states:::glue:startJobRun.sync", 
         "Type": "Task", 
         "Parameters": {
            "JobName": "", 
            "JobRunId": "", 
            "Arguments": {}, 
            "AllocatedCapacity": 0, 
            "Timeout": 1, 
            "SecurityConfiguration": "", 
            "NotificationProperty": {}
         }, 
         "Next": "SageMaker.CreateTrainingJob"
      }, 
      "SageMaker.CreateTrainingJob": {
         "Resource": "arn:aws:states:::sagemaker:createTrainingJob.sync", 
         "Type": "Task", 
         "Parameters": {
            "TrainingJobName": "", 
            "AlgorithmSpecification": {}, 
            "OutputDataConfig": {}, 
            "ResourceConfig": {}, 
            "RoleArn": "", 
            "StoppingCondition": {}, 
            "HyperParameters": {}, 
            "InputDataConfig": [], 
            "Tags": [], 
            "VpcConfig": {}
         }, 
         "Next": "SageMaker.CreateTransformJob"
      }, 
      "SageMaker.CreateTransformJob": {
         "Resource": "arn:aws:states:::sagemaker:createTransformJob.sync", 
         "Type": "Task", 
         "Parameters": {
            "TransformJobName": "", 
            "ModelName": "", 
            "TransformInput": {}, 
            "TransformOutput": {}, 
            "TransformResources": {}, 
            "BatchStrategy": "", 
            "Environment": {}, 
            "MaxConcurrentTransforms": 0, 
            "MaxPayloadInMB": 0, 
            "Tags": []
         }, 
         "Next": "Wait-Seconds"
      }, 
      "Wait-Seconds": {
         "Seconds": 1, 
         "Type": "Wait", 
         "Next": "Wait-Timestamp"
      }, 
      "Wait-Timestamp": {
         "Timestamp": "1111-11-11T11:11:11Z", 
         "Type": "Wait", 
         "Next": "Wait-Seconds-Path"
      }, 
      "Wait-Seconds-Path": {
         "SecondsPath": "$.foo", 
         "Type": "Wait", 
         "Next": "Wait-Timestamp-Path"
      }, 
      "Wait-Timestamp-Path": {
         "Comment": "Comment", 
         "OutputPath": "$.foo", 
         "Next": "While", 
         "TimestampPath": "$.foo", 
         "InputPath": "$.foo", 
         "Type": "Wait"
      }, 
      "While": {
         "InputPath": "$.foo", 
         "OutputPath": "$.foo", 
         "Default": "If-Elif-Else", 
         "Type": "Choice", 
         "Choices": [
            {
               "Variable": "$.foo", 
               "Next": "While-Body", 
               "NumericEquals": 1
            }
         ]
      }, 
      "While-Body": {
         "Type": "Pass", 
         "Next": "WhileLoop"
      }, 
      "WhileLoop": {
         "Type": "Pass", 
         "Next": "While"
      }, 
      "If-Elif-Else": {
         "Default": "Switch", 
         "Type": "Choice", 
         "Choices": [
            {
               "Or": [
                  {
                     "Variable": "$.foo", 
                     "NumericEquals": 1
                  }, 
                  {
                     "And": [
                        {
                           "Variable": "$.foo", 
                           "NumericGreaterThanEquals": 10
                        }, 
                        {
                           "Variable": "$.foo", 
                           "NumericLessThan": 20
                        }
                     ]
                  }
               ], 
               "Next": "Line216"
            }, 
            {
               "Variable": "$.foo", 
               "NumericLessThanEquals": 1, 
               "Next": "Line218"
            }, 
            {
               "Variable": "$.foo", 
               "NumericLessThan": 1, 
               "Next": "Line220"
            }, 
            {
               "Variable": "$.foo", 
               "NumericGreaterThanEquals": 1, 
               "Next": "Line222"
            }, 
            {
               "Variable": "$.foo", 
               "NumericGreaterThan": 1, 
               "Next": "Line224"
            }, 
            {
               "Not": {
                  "Variable": "$.foo", 
                  "NumericEquals": 1
               }, 
               "Next": "Line226"
            }, 
            {
               "Variable": "$.foo", 
               "StringEquals": "1", 
               "Next": "Line228"
            }, 
            {
               "Variable": "$.foo", 
               "StringLessThanEquals": "1", 
               "Next": "Line230"
            }, 
            {
               "Variable": "$.foo", 
               "StringLessThan": "1", 
               "Next": "Line232"
            }, 
            {
               "Variable": "$.foo", 
               "StringGreaterThanEquals": "1", 
               "Next": "Line234"
            }, 
            {
               "Variable": "$.foo", 
               "Next": "Line236", 
               "StringGreaterThan": "1"
            }, 
            {
               "Not": {
                  "Variable": "$.foo", 
                  "StringEquals": "1"
               }, 
               "Next": "Line238"
            }, 
            {
               "Variable": "$.foo", 
               "BooleanEquals": true, 
               "Next": "Line240"
            }, 
            {
               "Not": {
                  "Variable": "$.foo", 
                  "BooleanEquals": true
               }, 
               "Next": "Line242"
            }, 
            {
               "Variable": "$.foo", 
               "TimestampEquals": "1111-11-11T11:11:11Z", 
               "Next": "Line244"
            }, 
            {
               "Variable": "$.foo", 
               "TimestampLessThanEquals": "1111-11-11T11:11:11Z", 
               "Next": "Line246"
            }, 
            {
               "Variable": "$.foo", 
               "TimestampLessThan": "1111-11-11T11:11:11Z", 
               "Next": "Line248"
            }, 
            {
               "Variable": "$.foo", 
               "TimestampGreaterThanEquals": "1111-11-11T11:11:11Z", 
               "Next": "Line250"
            }, 
            {
               "Variable": "$.foo", 
               "TimestampGreaterThan": "1111-11-11T11:11:11Z", 
               "Next": "Line252"
            }, 
            {
               "Not": {
                  "Variable": "$.foo", 
                  "TimestampEquals": "1111-11-11T11:11:11Z"
               }, 
               "Next": "Line254"
            }
         ]
      }, 
      "Line216": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line218": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line220": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line222": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line224": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line226": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line228": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line230": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line232": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line234": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line236": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line238": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line240": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line242": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line244": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line246": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line248": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line250": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line252": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Line254": {
         "Type": "Pass", 
         "Next": "Switch"
      }, 
      "Switch": {
         "OutputPath": "$.foo", 
         "Default": "Line265", 
         "Type": "Choice", 
         "Choices": [
            {
               "Variable": "$.a", 
               "Next": "Line259", 
               "NumericEquals": 1
            }, 
            {
               "Variable": "$.a", 
               "StringEquals": "foo", 
               "Next": "Line261"
            }, 
            {
               "Variable": "$.a", 
               "TimestampEquals": "1111-11-11T11:11:11Z", 
               "Next": "Line263"
            }
         ]
      }, 
      "Line259": {
         "Type": "Pass", 
         "Next": "Parallel"
      }, 
      "Line261": {
         "Type": "Pass", 
         "Next": "Parallel"
      }, 
      "Line263": {
         "Type": "Pass", 
         "Next": "Parallel"
      }, 
      "Line265": {
         "Type": "Pass", 
         "Next": "Parallel"
      }, 
      "Parallel": {
         "Retry": [
            {
               "ErrorEquals": [
                  "States.ALL"
               ], 
               "MaxAttempts": 0, 
               "IntervalSeconds": 1, 
               "BackoffRate": 1.0
            }
         ], 
         "Branches": [
            {
               "States": {
                  "Success": {
                     "Comment": "Comment", 
                     "InputPath": "$.foo", 
                     "Type": "Succeed", 
                     "OutputPath": "$.foo"
                  }
               }, 
               "StartAt": "Success"
            }, 
            {
               "States": {
                  "Fail": {
                     "Comment": "Comment", 
                     "Cause": "cause", 
                     "Type": "Fail", 
                     "Error": "error"
                  }
               }, 
               "StartAt": "Fail"
            }
         ], 
         "Catch": [
            {
               "ErrorEquals": [
                  "States.ALL"
               ], 
               "Next": "Line290"
            }
         ], 
         "InputPath": "$.foo", 
         "End": true, 
         "Type": "Parallel"
      }, 
      "Line290": {
         "End": true, 
         "Type": "Pass"
      }
   }, 
   "Comment": "State machine comment", 
   "Version": "1.0", 
   "StartAt": "Pass", 
   "TimeoutSeconds": 60
}